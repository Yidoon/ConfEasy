name: Build and Release

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Package application
        run: npm run make

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: out/make/zip/darwin/**/*.zip

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: out/make/squirrel.windows/**/*.exe

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            out/make/deb/**/*.deb
            out/make/rpm/**/*.rpm

  create-tag:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, or use v0.0.0 if none exists
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag found: $LATEST_TAG"

      - name: Bump version
        id: tag_version
        run: |
          # Extract version from latest tag and auto-increment
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          VERSION=${LATEST_TAG#v}

          # Split version number
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Increment PATCH version
          PATCH=$((PATCH + 1))

          # Create new version
          NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Creating new tag: $NEW_TAG"

      - name: Create and push tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.tag_version.outputs.new_tag }}
          git push origin ${{ steps.tag_version.outputs.new_tag }}

  release:
    needs: [build, create-tag]
    runs-on: ubuntu-latest
    if: |
      always() && 
      (startsWith(github.ref, 'refs/tags/v') || 
       (github.ref == 'refs/heads/main' && needs.create-tag.result == 'success' && needs.create-tag.outputs.new_tag != ''))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: ./artifacts/macos/

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: ./artifacts/windows/

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: ./artifacts/linux/

      - name: Get tag name
        id: tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "name=${{ needs.create-tag.outputs.new_tag }}" >> $GITHUB_OUTPUT
          fi

      - name: List artifacts for debugging
        run: |
          echo "=== macOS artifacts ==="
          find ./artifacts/macos -type f 2>/dev/null || echo "No macOS artifacts found"
          echo "=== Windows artifacts ==="
          find ./artifacts/windows -type f 2>/dev/null || echo "No Windows artifacts found"
          echo "=== Linux artifacts ==="
          find ./artifacts/linux -type f 2>/dev/null || echo "No Linux artifacts found"

      - name: Verify artifacts exist
        run: |
          if [ -z "$(find ./artifacts -name '*.zip' -o -name '*.exe' -o -name '*.deb' -o -name '*.rpm' 2>/dev/null)" ]; then
            echo "Error: No release artifacts found!"
            exit 1
          fi
          echo "Found release artifacts:"
          find ./artifacts \( -name '*.zip' -o -name '*.exe' -o -name '*.deb' -o -name '*.rpm' \) -type f

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.name }}
          name: ConfEasy ${{ steps.tag.outputs.name }}
          body: |
            ## ConfEasy ${{ steps.tag.outputs.name }}

            ### 🎉 新版本发布

            **下载适合你操作系统的版本:**

            - 🍎 **macOS**: 下载 `.zip` 文件，解压后拖拽到应用程序文件夹
            - 🪟 **Windows**: 下载 `.exe` 文件并运行安装
            - 🐧 **Linux**: 
              - Ubuntu/Debian 系统下载 `.deb` 文件
              - CentOS/RHEL 系统下载 `.rpm` 文件

            ### ✨ 主要功能
            - 管理和编辑配置文件
            - 支持语法高亮
            - 标签系统组织文件
            - 跨平台支持

            ### 🔧 安装说明
            1. 从下方资源列表下载对应平台的安装包
            2. 按照操作系统的标准方式安装
            3. 首次运行时可能需要授权运行未签名应用
          files: |
            artifacts/macos/**/*.zip
            artifacts/windows/**/*.exe
            artifacts/linux/**/*.deb
            artifacts/linux/**/*.rpm
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
