{"version":3,"file":"main.js","sources":["../src/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain, dialog, shell } from \"electron\"\nimport { join } from \"node:path\"\nimport {\n  readFile,\n  writeFile,\n  access,\n  constants,\n  readdir,\n  stat,\n} from \"node:fs/promises\"\nimport { homedir } from \"node:os\"\n\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\nif (require(\"electron-squirrel-startup\")) {\n  app.quit()\n}\n\nconst createWindow = (): void => {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    minWidth: 800,\n    minHeight: 600,\n    webPreferences: {\n      preload: join(__dirname, \"preload.js\"),\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n    titleBarStyle: \"default\",\n    show: false,\n  })\n\n  // Show window when ready to prevent visual flash\n  mainWindow.once(\"ready-to-show\", () => {\n    mainWindow.show()\n  })\n\n  // Load the app\n  if (process.env.NODE_ENV === \"development\") {\n    mainWindow.loadURL(\"http://localhost:5173\")\n    mainWindow.webContents.openDevTools()\n  } else {\n    mainWindow.loadFile(join(__dirname, \"../dist/index.html\"))\n  }\n}\n\n// Common config file paths\nconst getConfigPaths = () => {\n  const home = homedir()\n  return {\n    npmrc: join(home, \".npmrc\"),\n    zshrc: join(home, \".zshrc\"),\n    bashrc: join(home, \".bashrc\"),\n    bash_profile: join(home, \".bash_profile\"),\n    gitconfig: join(home, \".gitconfig\"),\n    hosts:\n      process.platform === \"win32\"\n        ? \"C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts\"\n        : \"/etc/hosts\",\n    ssh_config: join(home, \".ssh\", \"config\"),\n    vscode_settings:\n      process.platform === \"darwin\"\n        ? join(\n            home,\n            \"Library\",\n            \"Application Support\",\n            \"Code\",\n            \"User\",\n            \"settings.json\"\n          )\n        : process.platform === \"win32\"\n        ? join(home, \"AppData\", \"Roaming\", \"Code\", \"User\", \"settings.json\")\n        : join(home, \".config\", \"Code\", \"User\", \"settings.json\"),\n  }\n}\n\n// IPC handlers\nipcMain.handle(\"get-config-files\", async () => {\n  const paths = getConfigPaths()\n  const files = []\n\n  for (const [name, path] of Object.entries(paths)) {\n    try {\n      await access(path, constants.F_OK)\n      files.push({ name, path, exists: true })\n    } catch {\n      files.push({ name, path, exists: false })\n    }\n  }\n\n  return files\n})\n\nipcMain.handle(\"read-file\", async (_, filePath: string) => {\n  try {\n    const content = await readFile(filePath, \"utf-8\")\n    return { success: true, content }\n  } catch (error) {\n    return { success: false, error: (error as Error).message }\n  }\n})\n\nipcMain.handle(\"write-file\", async (_, filePath: string, content: string) => {\n  try {\n    await writeFile(filePath, content, \"utf-8\")\n    return { success: true }\n  } catch (error) {\n    return { success: false, error: (error as Error).message }\n  }\n})\n\nipcMain.handle(\"select-file\", async () => {\n  const result = await dialog.showOpenDialog({\n    properties: [\"openFile\"],\n    filters: [\n      {\n        name: \"Config Files\",\n        extensions: [\"json\", \"yml\", \"yaml\", \"toml\", \"ini\", \"conf\", \"config\"],\n      },\n      { name: \"All Files\", extensions: [\"*\"] },\n    ],\n  })\n\n  if (!result.canceled && result.filePaths.length > 0) {\n    return result.filePaths[0]\n  }\n  return null\n})\n\nipcMain.handle(\"select-folder\", async () => {\n  const result = await dialog.showOpenDialog({\n    properties: [\"openDirectory\"],\n  })\n\n  if (!result.canceled && result.filePaths.length > 0) {\n    return result.filePaths[0]\n  }\n  return null\n})\n\n// Common config file patterns\nconst configPatterns = [\n  /\\.(json|yml|yaml|toml|ini|conf|config)$/i,\n  /^\\..*rc$/,\n  /^\\..*profile$/,\n  /^\\.gitconfig$/,\n  /^\\.gitignore$/,\n  /^\\.npmrc$/,\n  /^\\.editorconfig$/,\n  /^Dockerfile$/i,\n  /^Makefile$/i,\n  /^hosts$/,\n  /^config$/,\n]\n\nasync function scanDirectory(\n  dirPath: string,\n  files: Array<{ name: string; path: string; exists: boolean }>,\n  maxDepth = 2,\n  currentDepth = 0\n) {\n  if (currentDepth >= maxDepth) return\n\n  try {\n    const entries = await readdir(dirPath)\n\n    for (const entry of entries) {\n      const fullPath = join(dirPath, entry)\n\n      try {\n        const stats = await stat(fullPath)\n\n        if (stats.isFile()) {\n          // Check if file matches config patterns\n          const isConfigFile = configPatterns.some((pattern) =>\n            pattern.test(entry)\n          )\n\n          if (isConfigFile) {\n            files.push({\n              name: entry,\n              path: fullPath,\n              exists: true,\n            })\n          }\n        } else if (\n          stats.isDirectory() &&\n          !entry.startsWith(\".\") &&\n          entry !== \"node_modules\"\n        ) {\n          // Recursively scan subdirectories (but skip hidden dirs and node_modules)\n          await scanDirectory(fullPath, files, maxDepth, currentDepth + 1)\n        }\n      } catch (error) {\n        // Skip files/directories that can't be accessed\n        continue\n      }\n    }\n  } catch (error) {\n    // Skip directories that can't be read\n    return\n  }\n}\n\n// Scan folder for config files\nipcMain.handle(\"scan-folder\", async (_, folderPath: string) => {\n  try {\n    const files: Array<{ name: string; path: string; exists: boolean }> = []\n    await scanDirectory(folderPath, files)\n    return { success: true, files }\n  } catch (error) {\n    return { success: false, error: (error as Error).message, files: [] }\n  }\n})\n\nipcMain.handle(\"show-item-in-folder\", async (_, filePath: string) => {\n  shell.showItemInFolder(filePath)\n})\n\nipcMain.handle(\"add-file-by-path\", async (_, filePath: string) => {\n  try {\n    // Convert ~ to actual home directory path\n    let actualPath = filePath\n    if (actualPath.startsWith(\"~/\")) {\n      const home = homedir()\n      actualPath = actualPath.replace(\"~\", home)\n    }\n\n    await access(actualPath, constants.F_OK)\n    return { success: true, exists: true, actualPath }\n  } catch {\n    // Convert ~ to actual home directory path for non-existing files too\n    let actualPath = filePath\n    if (actualPath.startsWith(\"~/\")) {\n      const home = homedir()\n      actualPath = actualPath.replace(\"~\", home)\n    }\n    return { success: true, exists: false, actualPath }\n  }\n})\n\nipcMain.handle(\"get-platform\", () => {\n  return process.platform\n})\n\nipcMain.handle(\"check-path\", async (_, inputPath: string) => {\n  try {\n    // Convert ~ to actual home directory path\n    let actualPath = inputPath\n    if (actualPath.startsWith(\"~/\")) {\n      const home = homedir()\n      actualPath = actualPath.replace(\"~\", home)\n    }\n\n    await access(actualPath, constants.F_OK)\n    const stats = await stat(actualPath)\n\n    return {\n      success: true,\n      exists: true,\n      actualPath,\n      isFile: stats.isFile(),\n      isDirectory: stats.isDirectory(),\n    }\n  } catch {\n    // Convert ~ to actual home directory path for non-existing paths too\n    let actualPath = inputPath\n    if (actualPath.startsWith(\"~/\")) {\n      const home = homedir()\n      actualPath = actualPath.replace(\"~\", home)\n    }\n    return {\n      success: true,\n      exists: false,\n      actualPath,\n      isFile: false,\n      isDirectory: false,\n    }\n  }\n})\n\n// App event handlers\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on(\"activate\", () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit()\n  }\n})\n"],"names":["app","BrowserWindow","join","homedir","ipcMain","access","constants","readFile","writeFile","dialog","readdir","stat","shell"],"mappings":"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"}