"use strict";
const electron = require("electron");
electron.contextBridge.exposeInMainWorld("electronAPI", {
  getConfigFiles: () => electron.ipcRenderer.invoke("get-config-files"),
  readFile: (filePath) => electron.ipcRenderer.invoke("read-file", filePath),
  writeFile: (filePath, content) => electron.ipcRenderer.invoke("write-file", filePath, content),
  selectFile: () => electron.ipcRenderer.invoke("select-file"),
  selectFolder: () => electron.ipcRenderer.invoke("select-folder"),
  scanFolder: (folderPath) => electron.ipcRenderer.invoke("scan-folder", folderPath),
  showItemInFolder: (filePath) => electron.ipcRenderer.invoke("show-item-in-folder", filePath),
  addFileByPath: (filePath) => electron.ipcRenderer.invoke("add-file-by-path", filePath),
  getPlatform: () => electron.ipcRenderer.invoke("get-platform"),
  checkPath: (inputPath) => electron.ipcRenderer.invoke("check-path", inputPath),
  scanFolderTree: (folderPath, maxDepth) => electron.ipcRenderer.invoke("scan-folder-tree", folderPath, maxDepth),
  getFolderContents: (folderPath) => electron.ipcRenderer.invoke("get-folder-contents", folderPath),
  getConfigTemplates: () => electron.ipcRenderer.invoke("get-config-templates"),
  checkFilesExistence: (filePaths) => electron.ipcRenderer.invoke("check-files-existence", filePaths)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL3ByZWxvYWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udGV4dEJyaWRnZSwgaXBjUmVuZGVyZXIgfSBmcm9tIFwiZWxlY3Ryb25cIlxuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ0ZpbGUge1xuICBuYW1lOiBzdHJpbmdcbiAgcGF0aDogc3RyaW5nXG4gIGV4aXN0czogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ1RlbXBsYXRlIHtcbiAgbmFtZTogc3RyaW5nXG4gIHBhdGg6IHN0cmluZ1xuICBkZXNjcmlwdGlvbj86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVSZXN1bHQge1xuICBzdWNjZXNzOiBib29sZWFuXG4gIGNvbnRlbnQ/OiBzdHJpbmdcbiAgZXJyb3I/OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxlU3lzdGVtSXRlbSB7XG4gIG5hbWU6IHN0cmluZ1xuICBwYXRoOiBzdHJpbmdcbiAgdHlwZTogJ2ZpbGUnIHwgJ2ZvbGRlcidcbiAgZXhpc3RzOiBib29sZWFuXG4gIHRhZ3M/OiBzdHJpbmdbXVxuICBjaGlsZHJlbj86IEZpbGVTeXN0ZW1JdGVtW11cbiAgZXhwYW5kZWQ/OiBib29sZWFuXG4gIGlzTG9hZGluZz86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb2xkZXJUcmVlUmVzdWx0IHtcbiAgc3VjY2VzczogYm9vbGVhblxuICBpdGVtczogRmlsZVN5c3RlbUl0ZW1bXVxuICBlcnJvcj86IHN0cmluZ1xufVxuXG4vLyBFeHBvc2UgcHJvdGVjdGVkIG1ldGhvZHMgdGhhdCBhbGxvdyB0aGUgcmVuZGVyZXIgcHJvY2VzcyB0byB1c2Vcbi8vIHRoZSBpcGNSZW5kZXJlciB3aXRob3V0IGV4cG9zaW5nIHRoZSBlbnRpcmUgb2JqZWN0XG5jb250ZXh0QnJpZGdlLmV4cG9zZUluTWFpbldvcmxkKFwiZWxlY3Ryb25BUElcIiwge1xuICBnZXRDb25maWdGaWxlczogKCk6IFByb21pc2U8Q29uZmlnRmlsZVtdPiA9PlxuICAgIGlwY1JlbmRlcmVyLmludm9rZShcImdldC1jb25maWctZmlsZXNcIiksXG4gIHJlYWRGaWxlOiAoZmlsZVBhdGg6IHN0cmluZyk6IFByb21pc2U8RmlsZVJlc3VsdD4gPT5cbiAgICBpcGNSZW5kZXJlci5pbnZva2UoXCJyZWFkLWZpbGVcIiwgZmlsZVBhdGgpLFxuICB3cml0ZUZpbGU6IChmaWxlUGF0aDogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcpOiBQcm9taXNlPEZpbGVSZXN1bHQ+ID0+XG4gICAgaXBjUmVuZGVyZXIuaW52b2tlKFwid3JpdGUtZmlsZVwiLCBmaWxlUGF0aCwgY29udGVudCksXG4gIHNlbGVjdEZpbGU6ICgpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+ID0+IGlwY1JlbmRlcmVyLmludm9rZShcInNlbGVjdC1maWxlXCIpLFxuICBzZWxlY3RGb2xkZXI6ICgpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+ID0+XG4gICAgaXBjUmVuZGVyZXIuaW52b2tlKFwic2VsZWN0LWZvbGRlclwiKSxcbiAgc2NhbkZvbGRlcjogKFxuICAgIGZvbGRlclBhdGg6IHN0cmluZ1xuICApOiBQcm9taXNlPHtcbiAgICBzdWNjZXNzOiBib29sZWFuXG4gICAgZmlsZXM6IEFycmF5PHsgbmFtZTogc3RyaW5nOyBwYXRoOiBzdHJpbmc7IGV4aXN0czogYm9vbGVhbiB9PlxuICAgIGVycm9yPzogc3RyaW5nXG4gIH0+ID0+IGlwY1JlbmRlcmVyLmludm9rZShcInNjYW4tZm9sZGVyXCIsIGZvbGRlclBhdGgpLFxuICBzaG93SXRlbUluRm9sZGVyOiAoZmlsZVBhdGg6IHN0cmluZyk6IFByb21pc2U8dm9pZD4gPT5cbiAgICBpcGNSZW5kZXJlci5pbnZva2UoXCJzaG93LWl0ZW0taW4tZm9sZGVyXCIsIGZpbGVQYXRoKSxcbiAgYWRkRmlsZUJ5UGF0aDogKFxuICAgIGZpbGVQYXRoOiBzdHJpbmdcbiAgKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IGV4aXN0czogYm9vbGVhbjsgYWN0dWFsUGF0aD86IHN0cmluZyB9PiA9PlxuICAgIGlwY1JlbmRlcmVyLmludm9rZShcImFkZC1maWxlLWJ5LXBhdGhcIiwgZmlsZVBhdGgpLFxuICBnZXRQbGF0Zm9ybTogKCk6IFByb21pc2U8c3RyaW5nPiA9PiBpcGNSZW5kZXJlci5pbnZva2UoXCJnZXQtcGxhdGZvcm1cIiksXG4gIGNoZWNrUGF0aDogKFxuICAgIGlucHV0UGF0aDogc3RyaW5nXG4gICk6IFByb21pc2U8e1xuICAgIHN1Y2Nlc3M6IGJvb2xlYW5cbiAgICBleGlzdHM6IGJvb2xlYW5cbiAgICBhY3R1YWxQYXRoOiBzdHJpbmdcbiAgICBpc0ZpbGU6IGJvb2xlYW5cbiAgICBpc0RpcmVjdG9yeTogYm9vbGVhblxuICB9PiA9PiBpcGNSZW5kZXJlci5pbnZva2UoXCJjaGVjay1wYXRoXCIsIGlucHV0UGF0aCksXG4gIHNjYW5Gb2xkZXJUcmVlOiAoXG4gICAgZm9sZGVyUGF0aDogc3RyaW5nLFxuICAgIG1heERlcHRoPzogbnVtYmVyXG4gICk6IFByb21pc2U8Rm9sZGVyVHJlZVJlc3VsdD4gPT4gaXBjUmVuZGVyZXIuaW52b2tlKFwic2Nhbi1mb2xkZXItdHJlZVwiLCBmb2xkZXJQYXRoLCBtYXhEZXB0aCksXG4gIGdldEZvbGRlckNvbnRlbnRzOiAoXG4gICAgZm9sZGVyUGF0aDogc3RyaW5nXG4gICk6IFByb21pc2U8Rm9sZGVyVHJlZVJlc3VsdD4gPT4gaXBjUmVuZGVyZXIuaW52b2tlKFwiZ2V0LWZvbGRlci1jb250ZW50c1wiLCBmb2xkZXJQYXRoKSxcbiAgZ2V0Q29uZmlnVGVtcGxhdGVzOiAoKTogUHJvbWlzZTxDb25maWdUZW1wbGF0ZVtdPiA9PlxuICAgIGlwY1JlbmRlcmVyLmludm9rZShcImdldC1jb25maWctdGVtcGxhdGVzXCIpLFxuICBjaGVja0ZpbGVzRXhpc3RlbmNlOiAoZmlsZVBhdGhzOiBzdHJpbmdbXSk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+ID0+XG4gICAgaXBjUmVuZGVyZXIuaW52b2tlKFwiY2hlY2stZmlsZXMtZXhpc3RlbmNlXCIsIGZpbGVQYXRocyksXG59KVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIGVsZWN0cm9uQVBJOiB7XG4gICAgICBnZXRDb25maWdGaWxlczogKCkgPT4gUHJvbWlzZTxDb25maWdGaWxlW10+XG4gICAgICByZWFkRmlsZTogKGZpbGVQYXRoOiBzdHJpbmcpID0+IFByb21pc2U8RmlsZVJlc3VsdD5cbiAgICAgIHdyaXRlRmlsZTogKGZpbGVQYXRoOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZykgPT4gUHJvbWlzZTxGaWxlUmVzdWx0PlxuICAgICAgc2VsZWN0RmlsZTogKCkgPT4gUHJvbWlzZTxzdHJpbmcgfCBudWxsPlxuICAgICAgc2VsZWN0Rm9sZGVyOiAoKSA9PiBQcm9taXNlPHN0cmluZyB8IG51bGw+XG4gICAgICBzY2FuRm9sZGVyOiAoZm9sZGVyUGF0aDogc3RyaW5nKSA9PiBQcm9taXNlPHtcbiAgICAgICAgc3VjY2VzczogYm9vbGVhblxuICAgICAgICBmaWxlczogQXJyYXk8eyBuYW1lOiBzdHJpbmc7IHBhdGg6IHN0cmluZzsgZXhpc3RzOiBib29sZWFuIH0+XG4gICAgICAgIGVycm9yPzogc3RyaW5nXG4gICAgICB9PlxuICAgICAgc2hvd0l0ZW1JbkZvbGRlcjogKGZpbGVQYXRoOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD5cbiAgICAgIGFkZEZpbGVCeVBhdGg6IChcbiAgICAgICAgZmlsZVBhdGg6IHN0cmluZ1xuICAgICAgKSA9PiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZXhpc3RzOiBib29sZWFuOyBhY3R1YWxQYXRoPzogc3RyaW5nIH0+XG4gICAgICBnZXRQbGF0Zm9ybTogKCkgPT4gUHJvbWlzZTxzdHJpbmc+XG4gICAgICBjaGVja1BhdGg6IChpbnB1dFBhdGg6IHN0cmluZykgPT4gUHJvbWlzZTx7XG4gICAgICAgIHN1Y2Nlc3M6IGJvb2xlYW5cbiAgICAgICAgZXhpc3RzOiBib29sZWFuXG4gICAgICAgIGFjdHVhbFBhdGg6IHN0cmluZ1xuICAgICAgICBpc0ZpbGU6IGJvb2xlYW5cbiAgICAgICAgaXNEaXJlY3Rvcnk6IGJvb2xlYW5cbiAgICAgIH0+XG4gICAgICBzY2FuRm9sZGVyVHJlZTogKGZvbGRlclBhdGg6IHN0cmluZywgbWF4RGVwdGg/OiBudW1iZXIpID0+IFByb21pc2U8Rm9sZGVyVHJlZVJlc3VsdD5cbiAgICAgIGdldEZvbGRlckNvbnRlbnRzOiAoZm9sZGVyUGF0aDogc3RyaW5nKSA9PiBQcm9taXNlPEZvbGRlclRyZWVSZXN1bHQ+XG4gICAgICBnZXRDb25maWdUZW1wbGF0ZXM6ICgpID0+IFByb21pc2U8Q29uZmlnVGVtcGxhdGVbXT5cbiAgICAgIGNoZWNrRmlsZXNFeGlzdGVuY2U6IChmaWxlUGF0aHM6IHN0cmluZ1tdKSA9PiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PlxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbImNvbnRleHRCcmlkZ2UiLCJpcGNSZW5kZXJlciJdLCJtYXBwaW5ncyI6Ijs7QUF1Q0FBLFNBQUFBLGNBQWMsa0JBQWtCLGVBQWU7QUFBQSxFQUM3QyxnQkFBZ0IsTUFDZEMsU0FBQUEsWUFBWSxPQUFPLGtCQUFrQjtBQUFBLEVBQ3ZDLFVBQVUsQ0FBQyxhQUNUQSxTQUFBQSxZQUFZLE9BQU8sYUFBYSxRQUFRO0FBQUEsRUFDMUMsV0FBVyxDQUFDLFVBQWtCLFlBQzVCQSxTQUFBQSxZQUFZLE9BQU8sY0FBYyxVQUFVLE9BQU87QUFBQSxFQUNwRCxZQUFZLE1BQThCQSxTQUFBQSxZQUFZLE9BQU8sYUFBYTtBQUFBLEVBQzFFLGNBQWMsTUFDWkEsU0FBQUEsWUFBWSxPQUFPLGVBQWU7QUFBQSxFQUNwQyxZQUFZLENBQ1YsZUFLSUEsU0FBQUEsWUFBWSxPQUFPLGVBQWUsVUFBVTtBQUFBLEVBQ2xELGtCQUFrQixDQUFDLGFBQ2pCQSxTQUFBQSxZQUFZLE9BQU8sdUJBQXVCLFFBQVE7QUFBQSxFQUNwRCxlQUFlLENBQ2IsYUFFQUEsU0FBQUEsWUFBWSxPQUFPLG9CQUFvQixRQUFRO0FBQUEsRUFDakQsYUFBYSxNQUF1QkEsU0FBQUEsWUFBWSxPQUFPLGNBQWM7QUFBQSxFQUNyRSxXQUFXLENBQ1QsY0FPSUEsU0FBQUEsWUFBWSxPQUFPLGNBQWMsU0FBUztBQUFBLEVBQ2hELGdCQUFnQixDQUNkLFlBQ0EsYUFDOEJBLFNBQUFBLFlBQVksT0FBTyxvQkFBb0IsWUFBWSxRQUFRO0FBQUEsRUFDM0YsbUJBQW1CLENBQ2pCLGVBQzhCQSxTQUFBQSxZQUFZLE9BQU8sdUJBQXVCLFVBQVU7QUFBQSxFQUNwRixvQkFBb0IsTUFDbEJBLFNBQUFBLFlBQVksT0FBTyxzQkFBc0I7QUFBQSxFQUMzQyxxQkFBcUIsQ0FBQyxjQUNwQkEsU0FBQUEsWUFBWSxPQUFPLHlCQUF5QixTQUFTO0FBQ3pELENBQUM7In0=
